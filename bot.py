import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from vk_api.utils import get_random_id
from requests import get, post, delete

from datetime import datetime
import schedule
import threading
import time
from os import getenv

import yfinance as yf
import pandas as pd

# from config import TOKEN_VK, GROUP_ID
from scripts.functions import *
from scripts.excel_func import create
from scripts.maps import *

# HOST = 'https://api-stocks-kate-daria.herokuapp.com'
HOST = getenv("HOST", "")
TOKEN_VK = getenv("TOKEN_VK", "")
GROUP_ID = getenv("GROUP_ID", "")

users_data = {}
flags = {'AU': 'üá¶üá∫', 'AZ': 'üá¶üáø', 'GB': 'üá¨üáß', 'AM': 'üá¶üá≤', 'BY': 'üáßüáæ', 'BG': 'üáßüá¨', 'BR': 'üáßüá∑', 'HU': 'üá≠üá∫',
         'HK': 'üá≠üá∞', 'DK': 'üá©üá∞', 'US': 'üá∫üá∏', 'EU': 'üá™üá∫', 'IN': 'üáÆüá≥', 'KZ': 'üá∞üáø', 'CA': 'üá®üá¶', 'KG': 'üá∞üá¨',
         'CN': 'üá®üá≥', 'MD': 'üá≤üá©', 'NO': 'üá≥üá¥', 'PL': 'üáµüá±', 'RO': 'üá∑üá¥', 'SG': 'üá∏üá¨', 'TJ': 'üáπüáØ', 'TR': 'üáπüá∑',
         'TM': 'üáπüá≤', 'UZ': 'üá∫üáø', 'UA': 'üá∫üá¶', 'CZ': 'üá®üáø', 'SE': 'üá∏üá™', 'CH': 'üá®üá≠', 'ZA': 'üáøüá¶', 'KR': 'üá∞üá∑',
         'JP': 'üáØüáµ'}


class MyErrors(Exception):
    pass


class MessageError(MyErrors):
    pass


class GeoError(MyErrors):
    pass


class DateError(MyErrors):
    pass


def auth_handler():
    """ –ü—Ä–∏ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è. """
    key = input("Enter authentication code: ")
    remember_device = True  # –ï—Å–ª–∏: True - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, False - –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å.
    return key, remember_device


def generate_keyboard(n):
    global stocks
    keyboard = VkKeyboard(one_time=True)
    if n == 2:
        keyboard.add_button('–≤–∞–ª—é—Ç–∞', color=VkKeyboardColor.PRIMARY)
        keyboard.add_button('–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏', color=VkKeyboardColor.PRIMARY)
        keyboard.add_button('–∞–∫—Ü–∏–∏', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('–ø–æ–º–æ—â—å', color=VkKeyboardColor.DEFAULT)
        keyboard.add_button('—Ä–∞—Å—Å—ã–ª–∫–∞', color=VkKeyboardColor.DEFAULT)
        keyboard.add_line()
        keyboard.add_button('–õ–µ—Ç–∞—é—â–∏–µ –¥–µ–Ω—å–≥–∏', color=VkKeyboardColor.DEFAULT)
    elif n == 52:
        keyboard.add_button('–Ω–µ–¥–µ–ª—è', color=VkKeyboardColor.PRIMARY)
        keyboard.add_button('–¥–µ–Ω—å', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', color=VkKeyboardColor.DEFAULT)
    elif n == 7:
        keyboard.add_button('–î–∞', color=VkKeyboardColor.POSITIVE)
        keyboard.add_button('–ù–µ—Ç', color=VkKeyboardColor.NEGATIVE)
    elif n == 21:
        keyboard.add_button('–¥–æ–±–∞–≤–∏—Ç—å', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('\U0001F519', color=VkKeyboardColor.DEFAULT)
        keyboard.add_line()
        keyboard.add_button('–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–¥–Ω–æ–π', color=VkKeyboardColor.PRIMARY)
        keyboard.add_button('–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö', color=VkKeyboardColor.PRIMARY)
    elif n == 70:
        keyboard.add_button('–±–∞–Ω–∫', color=VkKeyboardColor.PRIMARY)
        keyboard.add_button('\U0001F519', color=VkKeyboardColor.DEFAULT)
        keyboard.add_button('–±–∞–Ω–∫–æ–º–∞—Ç', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('–æ–±–º–µ–Ω –≤–∞–ª—é—Ç—ã', color=VkKeyboardColor.PRIMARY)
    elif n == 71:
        keyboard.add_location_button()
        keyboard.add_line()
        keyboard.add_button('–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', color=VkKeyboardColor.DEFAULT)
    elif n == 40:
        keyboard.add_button('—Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å', color=VkKeyboardColor.PRIMARY)
        keyboard.add_button('–≤—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', color=VkKeyboardColor.DEFAULT)
    elif n == 42 or n == 31:
        keyboard.add_button('–Ω–µ–¥–µ–ª—è', color=VkKeyboardColor.PRIMARY)
        keyboard.add_button('–º–µ—Å—è—Ü', color=VkKeyboardColor.PRIMARY)
        keyboard.add_button('–≥–æ–¥', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', color=VkKeyboardColor.DEFAULT)
    elif n == 30:
        with open('static/static_data/tickers.txt', 'r') as f:
            stocks = f.readlines()[0].split(',')
        for i in range(min(len(stocks), 20)):
            keyboard.add_button(stocks[i], color=VkKeyboardColor.PRIMARY)
            if i % 4 == 3 and i != len(stocks) - 1:
                keyboard.add_line()
    else:
        keyboard.add_button('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', color=VkKeyboardColor.DEFAULT)
    return keyboard


def new_user(response, vk, uid):
    message = f"–ü—Ä–∏–≤–µ—Ç, {response[0]['first_name']}!"
    vk.messages.send(user_id=uid,
                     message=message,
                     random_id=get_random_id())
    menu(vk, uid)


def menu(vk, uid):
    users_data[uid]['state'] = 2
    keyboard = generate_keyboard(2)
    vk.messages.send(user_id=uid,
                     message='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é', keyboard=keyboard.get_keyboard(),
                     random_id=get_random_id())


def show_help(response, vk, uid):
    vk.messages.send(user_id=uid, message=f'''\U0001F4DA–ü–æ–º–æ—â—å\U0001F4DA
–ü—Ä–∏–≤–µ—Ç, {response[0]['first_name']}
–í –º–µ–Ω—é —Ç–µ–±—è –≤—Å—Ç—Ä–µ—á–∞–µ—Ç –º–Ω–æ–≥–æ –∫–Ω–æ–ø–æ—á–µ–∫. –¥–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –æ–Ω–∏ —É–º–µ—é—Ç:

\U00000031\U000020E3 "–í–∞–ª—é—Ç–∞" –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç:
\U0001F538 "–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å" –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–±–µ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞–ª—é—Ç, –∫–æ—Ç–æ—Ä—ã–µ —è –∑–Ω–∞—é, –∏ –∏—Ö —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å
\U0001F538 "–í—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É" –ø–æ–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–∫–æ–π-–ª–∏–±–æ –≤–∞–ª—é—Ç–µ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –¢—ã –∂–µ –Ω–µ –ø—Ä–æ—Ç–∏–≤ excel? –í—Å–µ, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ, - —ç—Ç–æ –≤—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É (—è –¥–∞–º —Ç–µ–±–µ —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö, —á—Ç–æ –∑–Ω–∞—é, –∏ —Ç—ã –≤–≤–µ–¥–µ—à—å –º–Ω–µ –Ω–æ–º–µ—Ä –≤ —Å–ø–∏—Å–∫–µ) –∏ –ø–µ—Ä–∏–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01/04/2020-01/05/2020)

\U00000032\U000020E3 "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏" –æ—Ç—ã—â–µ—Ç –±–ª–∏–∂–∞–π—à–∏–µ –±–∞–Ω–∫–∏, –±–∞–Ω–∫–æ–º–∞—Ç—ã –∏–ª–∏ –ø—É–Ω–∫—Ç—ã –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç
\U0001F538 –≤—ã–±–µ—Ä–∏ —Ç–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏ —É–∫–∞–∂–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ

\U00000033\U000020E3 "–ê–∫—Ü–∏–∏" –ø–æ–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∞–∫—Ü–∏—è—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–µ–π—Å—Ç–≤–∏—é "–í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã"

\U00000034\U000020E3 "–†–∞—Å—Å—ã–ª–∫–∞" –º–æ–∂–µ—Ç —Å–æ–æ–±—â–∏—Ç—å —Ç–µ–±–µ, –∫–æ–≥–¥–∞ –∫—É—Ä—Å –∫–∞–∫–æ–π-–ª–∏–±–æ –≤–∞–ª—é—Ç—ã –≤—ã—Ä–∞—Å—Ç–µ—Ç –∏–ª–∏ –ø–æ–Ω–∏–∑–∏—Ç—Å—è –Ω–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ —Ä –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
\U0001F538 "–î–æ–±–∞–≤–∏—Ç—å" –Ω–∞—á–Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É, –ø–µ—Ä–∏–æ–¥, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ (–¥–µ–Ω—å –∏–ª–∏ –Ω–µ–¥–µ–ª—è), –∏ —Å–∞–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
\U0001F538 "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö" —É–¥–∞–ª–∏—Ç –≤—Å–µ —Ç–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
\U0001F538 "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–¥–Ω–æ–π" –ø–æ–∫–∞–∂–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∏—è –æ–¥–Ω–æ–π –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑ –Ω–∏—Ö''',
                     random_id=get_random_id(), keyboard=generate_keyboard(2).get_keyboard())


def choose_currency(vk, uid):
    currency = [str(n + 1) + ' ' + flags.get(item["CharCode"][:2], " ") + f'{item["CharCode"]}' for n, item in
                enumerate(data)]
    vk.messages.send(user_id=uid, message='\U0001F310 –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É\n' + '\n'.join(currency),
                     random_id=get_random_id(), keyboard=generate_keyboard(0).get_keyboard())
    users_data[uid]['state'] = 41


def check_the_currency_selection(vk, uid, text):
    text = text.rstrip().lstrip()
    try:
        users_data[uid]['currency'] = cur_id[int(text)]
    except Exception:
        raise MessageError
    users_data[uid]['state'] = 42
    vk.messages.send(user_id=uid,
                     message=f'\U0001F4C5 –ü–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é, –º–µ—Å—è—Ü, –≥–æ–¥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.YYYY-dd.mm.YYYY',
                     random_id=get_random_id(), keyboard=generate_keyboard(42).get_keyboard())


def check_date_selection(vk, uid, text):
    text = text.lstrip().rstrip().lower()
    d = {'–Ω–µ–¥–µ–ª—è': 7, '–º–µ—Å—è—Ü': 30, '–≥–æ–¥': 365}
    try:
        if text in d:
            date_to = datetime.date.today().strftime('%d/%m/%Y')
            date_from = (datetime.date.today() - datetime.timedelta(days=d[text])).strftime('%d/%m/%Y')
        else:
            date_from, date_to = text.replace('.', '/').split('-')
        data_of_one_curr = data_of_one_curr_for_a_per(date_from, date_to,
                                                      users_data[uid]['currency'][0])["ValCurs"]["Record"]
        data_of_one_curr = list(map(lambda x: [x["@Date"], float(x["Value"].replace(',', '.'))], data_of_one_curr))
    except Exception:
        raise DateError
    vk.messages.send(user_id=uid, random_id=get_random_id(), message='–ø–æ–¥–æ–∂–¥–∏—Ç–µ, —Å–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\U0001F50E')
    name = from_id_to_name(users_data[uid]['currency'][0])
    code = users_data[uid]['currency'][1]
    filename = f'{code}_{date_from}_{date_to}'.replace('/', '-') + '.xlsx'
    data_ = [{'name': code, 'chart_name': name, 'data': data_of_one_curr}]
    create(data_, filename)
    users_data[uid]['filename'] = filename
    users_data[uid]['count'] = 1


def show_chart(vk, vk_session, uid):
    upload = vk_api.VkUpload(vk_session)
    doc = upload.document_message(f'static/excel/{users_data[uid]["filename"]}', peer_id=uid,
                                  title=users_data[uid]['filename'])['doc']
    attachment = [f'doc{doc["owner_id"]}_{doc["id"]}']
    for i in range(users_data[uid]['count']):
        photo = upload.photo_messages(f'static/img/charts/{users_data[uid]["filename"].split(".")[0]}_{i + 1}.png')[0]
        attachment.append(f'photo{photo["owner_id"]}_{photo["id"]}')
    vk.messages.send(user_id=uid, message='–ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –≤—ã–±–æ—Ä', attachment=','.join(attachment),
                     random_id=get_random_id(), keyboard=generate_keyboard(2).get_keyboard())
    users_data[uid]['state'] = 2


def show_all(vk, uid):
    message = [flags.get(item["CharCode"][:2], " ") + f'{item["Nominal"]} {item["CharCode"]}' + f' {item["Value"]} ‚ÇΩ'
               for item in data]
    vk.messages.send(user_id=uid, message='—Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å\n' + '\n'.join(message),
                     random_id=get_random_id(), keyboard=generate_keyboard(2).get_keyboard())
    users_data[uid]["state"] = 2


def mailing(vk, uid):
    vk.messages.send(user_id=uid, message='—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π \U0001F4B8',
                     random_id=get_random_id(), keyboard=generate_keyboard(21).get_keyboard())
    users_data[uid]['state'] = 50


def mailing_choose(vk, uid):
    message = [str(n + 1) + ' ' + flags.get(item["CharCode"][:2], " ") + f'{item["CharCode"]}' for n, item in
               enumerate(data)]
    vk.messages.send(user_id=uid, message='–û–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –∫–∞–∫–æ–π –≤–∞–ª—é—Ç—ã –≤–∞–º —Å–æ–æ–±—â–∏—Ç—å?\n' + '\n'.join(
        message) + '\n–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞–ª—é—Ç—ã –≤ —Å–ø–∏—Å–∫–µ',
                     random_id=get_random_id(), keyboard=generate_keyboard(0).get_keyboard())
    users_data[uid]["state"] = 51


def mailing_check_number(vk, uid, text):
    text = text.rstrip().lstrip()
    try:
        users_data[uid]['temporary'] = {}
        users_data[uid]['temporary']['currency'] = cur_id[int(text)]
    except Exception:
        raise MessageError
    vk.messages.send(user_id=uid, message="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ —Å–ª–µ–¥—É–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å?",
                     random_id=get_random_id(), keyboard=generate_keyboard(52).get_keyboard())
    users_data[uid]["state"] = 52


def mailing_period(vk, uid, text):
    d = {'–¥–µ–Ω—å': 1, '–Ω–µ–¥–µ–ª—è': 7}
    text = text.lstrip().rstrip()
    try:
        users_data[uid]['temporary']['period'] = d[text]
    except Exception:
        raise MessageError
    vk.messages.send(user_id=uid,
                     message="–Ø —Å–æ–æ–±—â—É –≤–∞–º, –∫–æ–≥–¥–∞ –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ —Ä% \n –≤–≤–µ–¥–∏—Ç–µ —Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ '+—Ä' üìà –∏–ª–∏ '-—Ä' üìâ",
                     random_id=get_random_id(), keyboard=generate_keyboard(0).get_keyboard())
    users_data[uid]["state"] = 53


def mailing_percent(vk, uid, text):
    text = text.lstrip().rstrip()
    try:
        users_data[uid]['temporary']['percent'] = float(text)
    except Exception:
        raise MessageError
    d = {7: '–Ω–µ–¥–µ–ª—é', 1: '–¥–µ–Ω—å'}
    vk.messages.send(user_id=uid,
                     message=f"–Ø –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∑–∞ {d[users_data[uid]['temporary']['period']]} –∫—É—Ä—Å " +
                             f"{users_data[uid]['temporary']['currency'][1]} –∏–∑–º–µ–Ω–∏—Ç—Å—è" +
                             f" –Ω–∞ {users_data[uid]['temporary']['percent']}%\n–í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ?",
                     random_id=get_random_id(), keyboard=generate_keyboard(7).get_keyboard())
    users_data[uid]['state'] = 54


def unsubscribe_from_all(vk, uid):
    res = delete(f'{HOST}/api/user-mailing-lists/{uid}').json()
    if res['success'] == 'OK':
        message = '–≤—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≤—Å–µ—Ö —Ä–∞—Å—Å—ã–ª–æ–∫'
    else:
        message = '—É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫'
    vk.messages.send(user_id=uid, message=message,
                     random_id=get_random_id(), keyboard=generate_keyboard(2).get_keyboard())
    users_data[uid]["state"] = 2


def unsubscribe_choose(vk, uid):
    res = get(f'{HOST}/api/user-mailing-lists/{uid}').json()['items']
    if res:
        d = {7: 'week', 1: 'day'}
        users_data[uid]['temporary'] = res
        message = [f'{i + 1} {res[i]["code"]} {d[res[i]["period"]]} {res[i]["percent"]}%' for i in range(len(res))]
        vk.messages.send(user_id=uid, message='–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö:\n' + '\n'.join(
            message) + '\n–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ä–∞—Å—Å—ã–ª–æ–∫, –æ—Ç –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é',
                         random_id=get_random_id(), keyboard=generate_keyboard(0).get_keyboard())
        users_data[uid]["state"] = 60
    else:
        vk.messages.send(user_id=uid, message='—É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫',
                         random_id=get_random_id(), keyboard=generate_keyboard(2).get_keyboard())
        users_data[uid]["state"] = 2


def unsubscribe(vk, uid, text):
    text = text.lstrip().rstrip().split(',')
    items = []
    for item in list(text):
        item = item.rstrip().lstrip()
        if item.isdigit():
            items.append(item)
            try:
                delete(f'{HOST}/api/mailing/{users_data[uid]["temporary"][int(item) - 1]["id"]}').json()
            except Exception:
                pass
    if items:
        vk.messages.send(user_id=uid, message='–≤—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–Ω—ã', random_id=get_random_id())
        menu(vk, uid)
    else:
        raise MessageError


def mailing_add_to_db(vk, uid):
    post(f'{HOST}/api/mailing',
         json={'currency': users_data[uid]['temporary']['currency'][0],
               'period': users_data[uid]['temporary']['period'],
               'uid': uid, 'code': users_data[uid]['temporary']['currency'][1],
               'percent': users_data[uid]['temporary']['percent'],
               'status': True}).json()
    users_data[uid]['temporary'] = {}
    vk.messages.send(user_id=uid, message='–ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞', random_id=get_random_id())
    menu(vk, uid)


def flying_money(vk, uid):
    vk.messages.send(user_id=uid, message='–£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ª–µ—Ç–∞—é—â–∏—Ö –¥–µ–Ω–µ–≥?',
                     random_id=get_random_id(), keyboard=generate_keyboard(7).get_keyboard())
    users_data[uid]['state'] = 1000


def show_stocks(vk, uid):
    vk.messages.send(user_id=uid,
                     attachment=f'photo-{GROUP_ID}_457239088',
                     random_id=get_random_id(), keyboard=generate_keyboard(30).get_keyboard())
    users_data[uid]["state"] = 30


def stocks_ticker(vk, uid, text):
    text = text.rstrip().lstrip().upper()
    if text not in stocks:
        raise MessageError
    users_data[uid]['temporary'] = {}
    users_data[uid]['temporary']['ticker'] = text
    users_data[uid]['state'] = 31
    vk.messages.send(user_id=uid, keyboard=generate_keyboard(31).get_keyboard(), random_id=get_random_id(),
                     message=f'\U0001F4C5 –ü–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é, –º–µ—Å—è—Ü, –≥–æ–¥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.YYYY-dd.mm.YYYY')


def stocks_date(vk, uid, text):
    ticker = users_data[uid]['temporary']['ticker']
    text = text.lstrip().rstrip().lower()
    d = {'–Ω–µ–¥–µ–ª—è': 7, '–º–µ—Å—è—Ü': 30, '–≥–æ–¥': 365}
    try:
        if text in d:
            date_to = datetime.date.today().strftime('%d/%m/%Y')
            date_from = (datetime.date.today() - datetime.timedelta(days=d[text])).strftime('%d/%m/%Y')
        else:
            date_from, date_to = text.replace('.', '/').split('-')
            datetime.datetime.strptime(date_from, '%d/%m/%Y')
            datetime.datetime.strptime(date_to, '%d/%m/%Y')
        date_from, date_to = map(lambda x: '-'.join(x.split('/')[::-1]), [date_from, date_to])
        vk.messages.send(user_id=uid, random_id=get_random_id(), message='–ø–æ–¥–æ–∂–¥–∏—Ç–µ, —Å–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\U0001F50E')
        data_ = yf.download(ticker, start=date_from, end=date_to).iloc[:, 0:4]
    except Exception as s:
        raise DateError
    open_ = list(zip(*[list(map(lambda x: x.strftime('%d/%m/%Y'), data_.index))] + [data_['Open'].values.tolist()]))
    high = list(zip(*[list(map(lambda x: x.strftime('%d/%m/%Y'), data_.index))] + [data_['High'].values.tolist()]))
    low = list(zip(*[list(map(lambda x: x.strftime('%d/%m/%Y'), data_.index))] + [data_['Low'].values.tolist()]))
    close = list(zip(*[list(map(lambda x: x.strftime('%d/%m/%Y'), data_.index))] + [data_['Close'].values.tolist()]))
    filename = f"{ticker}_{date_from}_{date_to}".replace('/', '-') + '.xlsx'
    data_ = [{'name': ticker, 'chart_name': ticker + ' Open', 'data': open_},
             {'name': ticker, 'chart_name': ticker + ' High', 'data': high},
             {'name': ticker, 'chart_name': ticker + ' Low', 'data': low},
             {'name': ticker, 'chart_name': ticker + ' Close', 'data': close}]
    create(data_, filename=filename)
    users_data[uid]['filename'] = filename
    users_data[uid]['count'] = 4


def type_selection(vk, uid, text):
    text = text.lstrip().rstrip().lower()
    if text not in ['–æ–±–º–µ–Ω –≤–∞–ª—é—Ç—ã', '–±–∞–Ω–∫', '–±–∞–Ω–∫–æ–º–∞—Ç']:
        raise MessageError
    users_data[uid]['type'] = text
    d = {'–æ–±–º–µ–Ω –≤–∞–ª—é—Ç—ã': '–ø—É–Ω–∫—Ç—ã –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç', '–±–∞–Ω–∫': '–±–∞–Ω–∫–∏', '–±–∞–Ω–∫–æ–º–∞—Ç': '–±–∞–Ω–∫–æ–º–∞—Ç—ã'}
    vk.messages.send(user_id=uid, random_id=get_random_id(),
                     keyboard=generate_keyboard(71).get_keyboard(),
                     message=f'—è –Ω–∞–π–¥—É –±–ª–∏–∂–∞–π—à–∏–µ –∫ –≤–∞–º {d[text]}\U0001F4B0 –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ')
    users_data[uid]['state'] = 71


def search_for_banks(vk, vk_session, uid, geo):
    if not geo:
        raise GeoError
    ll = str(geo['coordinates']['longitude']) + ',' + str(geo['coordinates']['latitude'])
    span = "0.003,0.003"
    banks = find_businesses(ll, span, users_data[uid]['type'])
    message = []
    pt = [ll + ',home']
    for i in range(len(banks)):
        pt.append(f'{",".join(list(map(str, banks[i]["geometry"]["coordinates"])))},pm2blm{i + 1}')
        bank = banks[i]["properties"]["CompanyMetaData"]
        message.append('\n'.join(
            [f'{i + 1}. {bank["name"]}', '–ê–¥—Ä–µ—Å: ' + bank["address"], '—Ç–µ–ª–µ—Ñ–æ–Ω: ' + bank['Phones'][0]["formatted"],
             '—Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ' + bank["Hours"]["text"]]))
    if show_map(pt):
        upload = vk_api.VkUpload(vk_session)
        photo = upload.photo_messages('static/img/map.png')[0]
        attachment = f'photo{photo["owner_id"]}_{photo["id"]}'
    else:
        attachment = None
    vk.messages.send(user_id=uid,
                     message='\n\n'.join(message), attachment=attachment,
                     random_id=get_random_id(), dont_parse_links=1)
    menu(vk, uid)


def main():
    vk_session = vk_api.VkApi(token=TOKEN_VK)
    longpoll = VkBotLongPoll(vk_session, GROUP_ID)
    for event in longpoll.listen():
        if event.type == VkBotEventType.MESSAGE_NEW:
            vk = vk_session.get_api()
            uid = event.message.from_id
            response = vk.users.get(user_id=uid)
            users_data[uid] = users_data.get(uid, dict())
            try:
                if 'state' not in users_data[uid]:
                    new_user(response, vk, uid)
                elif event.message.text.lower() in ['–º–µ–Ω—é', '–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', '\U0001F519']:
                    menu(vk, uid)
                elif users_data[uid]['state'] == 2:
                    if event.message.text.lower() == '–≤–∞–ª—é—Ç–∞':
                        vk.messages.send(user_id=uid,
                                         message="–∫–Ω–æ–ø–æ—á–∫–∏ –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º",
                                         random_id=get_random_id(), keyboard=generate_keyboard(40).get_keyboard())
                        users_data[uid]['state'] = 40
                    elif event.message.text.lower() == '–∞–∫—Ü–∏–∏':
                        show_stocks(vk, uid)
                    elif event.message.text.lower() == '–ø–æ–º–æ—â—å':
                        show_help(response, vk, uid)
                    elif event.message.text.lower() == '—Ä–∞—Å—Å—ã–ª–∫–∞':
                        mailing(vk, uid)
                    elif event.message.text.lower() == '–ª–µ—Ç–∞—é—â–∏–µ –¥–µ–Ω—å–≥–∏':
                        flying_money(vk, uid)
                    elif event.message.text.lower() == '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏':
                        vk.messages.send(user_id=uid, random_id=get_random_id(),
                                         keyboard=generate_keyboard(70).get_keyboard(),
                                         message='—è –Ω–∞–π–¥—É –±–ª–∏–∂–∞–π—à–∏–µ –∫ –≤–∞–º –±–∞–Ω–∫–∏, –±–∞–Ω–∫–æ–º–∞—Ç—ã –∏–ª–∏ –ø—É–Ω–∫—Ç—ã –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç. –ß—Ç–æ –∂–µ–ª–∞–µ—Ç–µ?')
                        users_data[uid]['state'] = 70
                    else:
                        raise MessageError
                elif users_data[uid]['state'] == 70:
                    type_selection(vk, uid, event.message.text)
                elif users_data[uid]['state'] == 71:
                    search_for_banks(vk, vk_session, uid, event.message.geo)
                elif users_data[uid]['state'] == 30:
                    stocks_ticker(vk, uid, event.message.text)
                elif users_data[uid]['state'] == 31:
                    stocks_date(vk, uid, event.message.text)
                    show_chart(vk, vk_session, uid)
                elif users_data[uid]["state"] == 40:
                    if event.message.text.lower() == '—Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å':
                        show_all(vk, uid)
                    elif event.message.text.lower() == '–≤—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É':
                        choose_currency(vk, uid)
                    else:
                        raise MessageError
                elif users_data[uid]['state'] == 41:
                    check_the_currency_selection(vk, uid, event.message.text)
                elif users_data[uid]['state'] == 42:
                    check_date_selection(vk, uid, event.message.text)
                    show_chart(vk, vk_session, uid)
                elif users_data[uid]['state'] == 50:
                    if event.message.text.lower() == '–¥–æ–±–∞–≤–∏—Ç—å':
                        mailing_choose(vk, uid)
                    elif event.message.text.lower() == '–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –≤—Å–µ—Ö':
                        unsubscribe_from_all(vk, uid)
                    elif event.message.text.lower() == '–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–¥–Ω–æ–π':
                        unsubscribe_choose(vk, uid)
                    else:
                        raise MessageError
                elif users_data[uid]['state'] == 51:
                    mailing_check_number(vk, uid, event.message.text)
                elif users_data[uid]['state'] == 52:
                    mailing_period(vk, uid, event.message.text)
                elif users_data[uid]['state'] == 53:
                    mailing_percent(vk, uid, event.message.text)
                elif users_data[uid]['state'] == 54:
                    if '–¥–∞' in event.message.text.lower():
                        mailing_add_to_db(vk, uid)
                    else:
                        vk.messages.send(user_id=uid,
                                         message="–¢–æ–≥–¥–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑",
                                         random_id=get_random_id())
                        mailing(vk, uid)
                elif users_data[uid]['state'] == 60:
                    unsubscribe(vk, uid, event.message.text)
                elif users_data[uid]['state'] == 1000:
                    if '–¥–∞' in event.message.text.lower():
                        vk.messages.send(user_id=uid, message='–ü–æ–ª–µ—Ç–µ–ª–∏!\n' + '\U0001F4B8' * 1008,
                                         random_id=get_random_id())
                    menu(vk, uid)
                else:
                    raise MessageError
            except DateError:
                keyboard = generate_keyboard(users_data[uid]["state"])
                vk.messages.send(user_id=uid, message='–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑',
                                 random_id=get_random_id(), keyboard=keyboard.get_keyboard())
            except GeoError:
                vk.messages.send(user_id=uid,
                                 message='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–æ—á–∫–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è\U0001F5FA\U0001F4CD',
                                 random_id=get_random_id(), keyboard=generate_keyboard(71).get_keyboard())
            except MessageError:
                keyboard = generate_keyboard(users_data[uid]["state"])
                vk.messages.send(user_id=uid, message='–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –≤ –º–µ–Ω—é',
                                 random_id=get_random_id(), keyboard=keyboard.get_keyboard())
            except Exception as s:
                print(s)
                vk.messages.send(user_id=uid, message='\U000026A0–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫,–Ω–æ –º—ã –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º\U000026A0',
                                 random_id=get_random_id())
                menu(vk, uid)


def mailing_main():
    list_id_curr = [cur_id[i][0] for i in cur_id]
    week = daily_data_of_all_change(list_id_curr, 7)
    day = daily_data_of_all_change(list_id_curr, 1)
    mailing = {1: day, 7: week}
    all_ = get(f'{HOST}/api/mailing').json()["items"]
    vk_session = vk_api.VkApi(token=TOKEN_VK)
    vk = vk_session.get_api()
    d = {1: '–ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å', 7: "–ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é"}
    for item in all_:
        try:
            if float(mailing[item["period"]][item["currency"]]) >= item["percent"] >= 0:
                message = f"\U00002757 –∑–∞ {d[item['period']]} –∫—É—Ä—Å {item['code']} –≤—ã—Ä–æ—Å –Ω–∞ {mailing[item['period']][item['currency']]}% \U00002757"
                vk.messages.send(user_id=item['uid'], random_id=get_random_id(), message=message)
            elif float(mailing[item["period"]][item["currency"]]) <= item["percent"] <= 0:
                message = f"\U00002757 –∑–∞ {d[item['period']]} –∫—É—Ä—Å {item['code']} –ø–æ–Ω–∏–∑–∏–ª—Å—è –Ω–∞ {abs(float(mailing[item['period']][item['currency']]))}% \U00002757"
                vk.messages.send(user_id=item['uid'], random_id=get_random_id(), message=message)
        except Exception:
            pass


def load_new_data():
    global data, cur_id
    date = datetime.date.today().strftime('%d/%m/%Y')
    data = daily_data_of_all(date)["ValCurs"]["Valute"]
    cur_id = {i + 1: [data[i]["@ID"], data[i]["CharCode"]] for i in range(len(data))}


def go():
    while True:
        schedule.run_pending()


schedule.every().day.at("06:00").do(load_new_data)
schedule.every().day.at("12:00").do(load_new_data)
schedule.every().day.at("18:00").do(load_new_data)
schedule.every().day.at("12:10").do(mailing_main)

# schedule.every().hour.at(":00").do(mailing_main)
# schedule.every().hour.at(":30").do(mailing_main)
t = threading.Thread(target=go)
t.start()

if __name__ == '__main__':
    load_new_data()
    main()

